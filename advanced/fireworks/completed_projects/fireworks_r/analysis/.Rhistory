# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe A")
db <- database(dev_root = "C:\Users\carls\Downloads\thot_tutorials\adv_fireworks_r\data\Recipe A")
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe A")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A")
# find all data with type `noise-data` in the subtree
noise_data <- db |> find_assets(type = "noise-data")
# load data into a dataframe
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv(# get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(volume = volumes, batch = batches)
df
# find all data with type `noise-data` in the subtree
noise_data <- db |> find_assets(type = "noise-data")
# load data into a dataframe
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv( # get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(volume = volumes, batch = batches)
df
df |> filter(volume < 70)
df |> filter(volume > 70)
df
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe C/Batch 2")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A-1-1\\Batch 2")
ssets(type = "noise-data")
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe C/Batch 2")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A-1-1\\Batch 2")
# find all data with type `noise-data` in the subtree
noise_data <- db |> find_assets(type = "noise-data")
# load data into a dataframe
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv( # get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(volume = volumes, batch = batches)
df
ata
# get data
noise_data <- db |> find_asset(type = "noise-data")
df <- noise_data@file |> read_csv(
col_types = cols(
Trial = col_integer(),
"Volume [dB]" = col_double()
)
)
df <- df |> rename("trial" = "Trial", "volume" = "Volume [dB]")
df
# remove invalid data
clean_df <- df |> filter(volume > 70)
clean_df
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe C/Batch 2")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A-1-1\\Batch 2")
# get data
noise_data <- db |> find_asset(type = "raw-data")
df <- noise_data@file |> read_csv(
col_types = cols(
Trial = col_integer(),
"Volume [dB]" = col_double()
)
)
# remove invalid data
clean_df <- df |> filter("Volume [dB]" > 70)
# save cleaned data
data_path = db |> add_asset(
"noise_data-cleaned.csv",
name="Noise Data - Cleaned",
type="noise-data",
tags=list("cleaned") # tag the data as cleaned for future reference
)
clean_df |> write.csv(data_path, row.names = FALSE)
clean_df
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe C/Batch 2")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A-1-1\\Batch 2")
# get data
noise_data <- db |> find_asset(type = "raw-data")
df <- noise_data@file |> read_csv(
col_types = cols(
Trial = col_integer(),
`Volume [dB]` = col_double()
)
)
# remove invalid data
clean_df <- df |> filter("Volume [dB]" > 70)
# save cleaned data
data_path = db |> add_asset(
"noise_data-cleaned.csv",
name="Noise Data - Cleaned",
type="noise-data",
tags=list("cleaned") # tag the data as cleaned for future reference
)
clean_df |> write.csv(data_path, row.names = FALSE)
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(ggplot2)
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe A")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A")
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(ggplot2)
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe A")
db <- database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A")
# find all data with type `noise-data` in the subtree
noise_data <- db |> find_assets(type = "noise-data")
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv(# get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(volume = volumes, batch = batches)
ggplot(data = df, aes(x = trial, y = `Volume [dB]`))
ggplot(data = df, aes(x = Trial, y = `Volume [dB]`))
df
# load data into a dataframe
trials <- c()
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv(# get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
trials <- c(trials, tdf[["Trial"]])
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(trial = trials, volume = volumes, batch = batches)
df
ggplot(data = df, aes(x = Trial, y = `Volume [dB]`))
ggplot(data = df, aes(x = trial, y = volumes))
ggplot(data = df, aes(x = trial, y = volumes, group = batch))
ggplot(data = df, aes(x = trial, y = volumes, group = batch)) + geom_line()
ggplot(data = df, aes(x = trial, y = volumes, fill = batch)) + geom_line()
ggplot(data = df, aes(x = trial, y = volumes, color = batch)) + geom_line()
ggplot(data = df, aes(x = trial, y = volumes, group = batch)) + geom_line(aes(color = batch))
# fit normal distribution across all data
mu <- df |> pull(volume) |> mean()
sigma <- df |> pull(volume) |> sd()
df$volume
# fit normal distribution across all data
mu <- df$volume |> mean()
sigma <- df$volume |> sd()
p <- ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15)
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15)
p <- ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15)
p <- ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
p <- ggplot(df, aes(x = volume)) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis())
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = dup_axis())
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
scale_y_continuous(sec.axis = dup_axis()) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(1))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(~.*1))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(~.*0.1))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))*10
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
alpha = 0.5,
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(~.*10))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(~.*10))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = sec_axis(~.*0.01))
ggplot(df, aes(x = volume)) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
geom_histogram(position = "identity",
bins = 15) +
scale_y_continuous(sec.axis = sec_axis(~.*0.01))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = dup_axis())
ggplot(df, aes(x = volume, y = ..density..)) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = dup_axis())
ggplot(df, aes(x = volume, y = after_stat(density))) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma)) +
scale_y_continuous(sec.axis = dup_axis())
ggplot(df, aes(x = volume, y = after_stat(density))) +
geom_histogram(position = "identity",
bins = 15) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15, aes(after_stat(density))) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15, aes(y = after_stat(density))) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
desc_df <- df |> summarise(
count = n(),
mean = mean(volume),
std = sd(volume),
min = min(volume),
max = max(volume)
)
desc_df
library(moments)
install.packages("moments")
library(moments)
# skewness of batches
skew_df <- c(skewness(df$volume))
skew_df
skew_df <- c(
skewness(df |> filter(batch = 1) |> pull(volume)),
)
skew_df <- c(
skewness(df |> filter(batch == 1) |> pull(volume)),
)
df |> filter(batch == 1) |> pull(volume)
a <- df |> filter(batch == 1) |> pull(volume)
skewness(a)
skew_df <- as.tibble(c(
skewness(df |> filter(batch == 1) |> pull(volume)),
skewness(df |> filter(batch == 2) |> pull(volume))
))
skew_df <- as_tibble(c(
skewness(df |> filter(batch == 1) |> pull(volume)),
skewness(df |> filter(batch == 2) |> pull(volume))
))
skew_df
# import libraries
suppressPackageStartupMessages(library(tidyverse))
library(moments)
library(ggplot2)
library(thot)
# initialize thot database
#db <- database(dev_root = "/absolute/path/to/silent_fireworks/data/Recipe A")
db <-
database(dev_root = "C:\\Users\\carls\\Downloads\\thot_tutorials\\adv_fireworks_r\\data\\Recipe A")
# find all data with type `noise-data` in the subtree
noise_data <- db |> find_assets(type = "noise-data")
# load data into a dataframe
trials <- c()
volumes <- c()
batches <- c()
for (data in noise_data) {
tdf <- data@file |> read_csv( # get file from Asset
col_types = cols
(Trial = col_integer(),
"Volume [dB]" = col_double()))
# store volume and batch
trials <- c(trials, tdf[["Trial"]])
volumes <- c(volumes, tdf[["Volume [dB]"]])
batches <-
c(batches, rep(as.integer(data@metadata$batch), count(tdf)))
}
df <- tibble(trial = trials,
volume = volumes,
batch = batches)
# --- analysis ---
# check for trend across trials
p <-
ggplot(data = df, aes(x = trial, y = volumes, group = batch)) + geom_line(aes(color = batch))
trial_vol_path <- db |> add_asset("figs/volume_by_trial.png", # place in the `figs` bucket
tags = list("figure"))
trial_vol_path |> ggsave(
plot = p,
width = 10,
height = 6,
dpi = 300
)
# fit normal distribution across all data
mu <- df$volume |> mean()
sigma <- df$volume |> sd()
ggplot(df, aes(x = volume)) +
geom_histogram(position = "identity",
bins = 15, aes(y = after_stat(density))) +
stat_function(fun = dnorm, args = list(mean = mu, sd = sigma))
norm_fit_path <- db |> add_asset("figs/norm_fit.png", # place in the `figs` bucket
tags = list("figure"))
norm_fit_path |> ggsave(
plot = p,
width = 10,
height = 6,
dpi = 300
)
# description of combined statistics
desc_df <- df |> summarise(
count = n(),
mean = mean(volume),
std = sd(volume),
min = min(volume),
max = max(volume)
)
desc_path = db |> add_asset("stats/describe_all.csv")  # place in the `stats` bucket
desc_df |> write.csv(desc_path, row.names = FALSE)
# skewness of batches
skew_df <- as_tibble(c(
skewness(df |> filter(batch == 1) |> pull(volume)),
skewness(df |> filter(batch == 2) |> pull(volume))
))
skew_path = db |> add_asset("stats/skew.csv") # place in the `stats` bucket
skew_df |> write.csv(skew_path)
